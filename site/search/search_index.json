{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Proxmox Templates &amp; Bundles","text":"<p>This site documents the repo that helps you build, clone, and run container-friendly VMs on Proxmox.</p> <ul> <li>Docker Template \u2014 Debian 12 base with Docker: docs \u00bb </li> <li>Portainer Demo \u2014 Cloud-init snippet + helper scripts: docs \u00bb</li> </ul> <p>Project on GitHub: virtualtom/proxmox</p>"},{"location":"docker-template/","title":"Proxmox Docker Template with Cloud-Init &amp; Compose","text":"<p>This bundle includes:</p> <ul> <li><code>snippets/app-inline-userdata.yaml</code>: cloud-init snippet with inline docker-compose</li> <li><code>snippets/app-fetch-userdata.yaml</code>: cloud-init snippet that fetches docker-compose from URL</li> <li><code>provision_compose_clone.sh</code>: helper script to clone from template and inject compose</li> </ul>"},{"location":"docker-template/#usage","title":"Usage","text":"<ol> <li>Copy <code>snippets/*.yaml</code> to your Proxmox snippets storage (e.g. <code>/var/lib/vz/snippets</code>).</li> <li>Copy <code>provision_compose_clone.sh</code> to your Proxmox host and <code>chmod +x</code> it.</li> <li>Run:</li> </ol> <pre><code>./provision_compose_clone.sh 201 web01 ~/.ssh/id_ed25519.pub myweb https://example.com/docker-compose.yml\n</code></pre> <p>The VM will boot, fetch or write the compose file, and auto-start it as a systemd service.</p>"},{"location":"docker-template/#full-files","title":"Full Files","text":""},{"location":"docker-template/#snippetsapp-inline-userdatayaml","title":"snippets/app-inline-userdata.yaml","text":"<pre><code>#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - docker.io\n  - docker-compose\nruncmd:\n  - [ sh, -c, \"docker compose -f /opt/app/docker-compose.yml up -d\" ]\nwrite_files:\n  - path: /opt/app/docker-compose.yml\n    permissions: '0644'\n    content: |\n      version: '3'\n      services:\n        hello:\n          image: hello-world\n\n</code></pre>"},{"location":"docker-template/#snippetsapp-fetch-userdatayaml","title":"snippets/app-fetch-userdata.yaml","text":"<pre><code>#cloud-config\npackage_update: true\npackage_upgrade: true\npackages:\n  - docker.io\n  - docker-compose\nruncmd:\n  - [ sh, -c, \"curl -fsSL https://example.com/docker-compose.yml -o /opt/app/docker-compose.yml\" ]\n  - [ sh, -c, \"docker compose -f /opt/app/docker-compose.yml up -d\" ]\n\n</code></pre>"},{"location":"docker-template/#provision_compose_clonesh","title":"provision_compose_clone.sh","text":"<pre><code>#!/bin/bash\n# provision_compose_clone.sh &lt;NEWID&gt; &lt;NEWHOSTNAME&gt; &lt;PUBKEYFILE&gt; &lt;APPNAME&gt; &lt;COMPOSE_URL&gt;\nset -e\n\nTEMPLATE_ID=9000\nNEWID=$1\nNEWHOSTNAME=$2\nPUBKEYFILE=$3\nAPPNAME=$4\nCOMPOSE_URL=$5\n\nqm clone $TEMPLATE_ID $NEWID --name $NEWHOSTNAME\nqm set $NEWID --ciuser dockeruser --sshkey $PUBKEYFILE\nqm set $NEWID --ipconfig0 ip=dhcp\nqm set $NEWID --cicustom \"user=local:snippets/app-fetch-userdata.yaml\"\nqm start $NEWID\n\n</code></pre>"},{"location":"generic-clone-builder/","title":"Generic Clone Builder (Compose)","text":"<p>Use an existing docker-compose.yml to clone a Debian 12 Docker VM template and bring up the container stack on first boot.</p>"},{"location":"generic-clone-builder/#prereqs","title":"Prereqs","text":"<ul> <li>Proxmox template: Debian 12 with Docker, cloud-init enabled</li> <li>SSH public key path available on the Proxmox node</li> <li>Compose file accessible by the Proxmox node</li> </ul>"},{"location":"generic-clone-builder/#script","title":"Script","text":"<p>bundles/generic-clone-builder/compose_clone.sh</p>"},{"location":"generic-clone-builder/#usage","title":"Usage","text":"<p>./bundles/generic-clone-builder/compose_clone.sh  <p>Example: ./bundles/generic-clone-builder/compose_clone.sh 950 kuma-01 ~/.ssh/id_ed25519.pub /mnt/pve/pve-qnap/apps/kuma/docker-compose.yml</p>"},{"location":"generic-clone-builder/#what-it-does","title":"What it does","text":"<ol> <li>Clones the Docker-base template into a new VM with the given VMID and NAME</li> <li>Injects your SSH public key via cloud-init</li> <li>Copies the docker-compose.yml to the VM</li> <li>Enables Docker and brings the stack up on first boot</li> </ol>"},{"location":"generic-clone-builder/#inputs","title":"Inputs","text":"<p>VMID: integer unique per VM NAME: VM name PUBKEY_PATH: path to your id_ed25519.pub or id_rsa.pub on the Proxmox node COMPOSE_YML: full path to docker-compose.yml on Proxmox storage (e.g., NFS mount)</p>"},{"location":"generic-clone-builder/#outputs","title":"Outputs","text":"<ul> <li>New VM named NAME</li> <li>Stack started by first-boot steps in the template</li> </ul>"},{"location":"generic-clone-builder/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>If the VM boots without containers, ssh in and run:   docker compose -f /opt/compose/docker-compose.yml up -d</li> <li>Ensure COMPOSE_YML path is readable by the Proxmox node user running qm</li> <li>Verify the template has Docker and the docker compose plugin installed</li> </ul>"},{"location":"overview/","title":"Proxmox Templates &amp; Bundles \u2014 Overview","text":"<p>This repository includes: - Docker base on Debian 12: prepare, build, and clone scripts. - Portainer demo: cloud-init snippet + helper script.</p>"},{"location":"overview/#quickstart-debian-12-docker-base","title":"Quickstart (Debian 12 Docker base)","text":"<pre><code>bash scripts/prep_deb12_docker_base.sh\nbash scripts/build_deb12_docker_base.sh\nbash scripts/clone_from_deb12_docker_base.sh &lt;VMID&gt; &lt;NAME&gt; &lt;PUBKEY_PATH&gt; &lt;compose.yml-path&gt;\n</code></pre> <p>More: docker-template.md \u2022 portainer-demo.md</p>"},{"location":"portainer-demo/","title":"Proxmox Debian 12 Docker Template Manual","text":""},{"location":"portainer-demo/#overview","title":"Overview","text":"<p>This guide covers how to build a Debian 12 \u201cgold image\u201d VM on Proxmox, prepare it with Docker and QEMU Guest Agent, convert it into a reusable template, and then clone it. It includes both ready-to-use scripts and manual command sequences for when you need finer control.</p>"},{"location":"portainer-demo/#section-1-host-build-base-vm-from-qcow2","title":"\ud83d\udd39 Section 1. Host: Build Base VM from qcow2","text":""},{"location":"portainer-demo/#script-build_deb12_docker_basesh","title":"Script: <code>build_deb12_docker_base.sh</code>","text":"<pre><code>#!/usr/bin/env bash\n# Creates a Debian 12 base VM with VGA + serial consoles and cloud-init enabled.\n\nset -euo pipefail\n\nVMID=9000\nNAME=deb12-docker-base\nBRIDGE=vmbr0\nMEM=2048\nCORES=2\nDISK_SIZE=20G\nISO_QCOW_PATH=/var/lib/vz/template/iso/debian-12-genericcloud-amd64.qcow2\nSTORAGE=local-lvm\nCIUSER=dockeruser\nCIPASS=TempPassw0rd!\n\nqm create $VMID --name $NAME --ostype l26 --memory $MEM --cores $CORES   --net0 virtio,bridge=$BRIDGE\n\nqm importdisk $VMID $ISO_QCOW_PATH $STORAGE\n\nDISK_REF=$(qm config $VMID | awk '/^unused[0-9]+:/ {print $2; exit}')\nqm set $VMID --scsihw virtio-scsi-pci --scsi0 $DISK_REF\nqm set $VMID --ide2 ${STORAGE}:cloudinit\nqm set $VMID --boot c --bootdisk scsi0\nqm set $VMID --vga std --serial0 socket --agent enabled=1\nqm resize $VMID scsi0 $DISK_SIZE || true\nqm set $VMID --ciuser $CIUSER --cipassword $CIPASS --ipconfig0 ip=dhcp\nqm cloudinit update $VMID\n\necho \"[\u2713] VM $VMID ($NAME) ready to boot.\"\n</code></pre>"},{"location":"portainer-demo/#manual-equivalent","title":"Manual Equivalent","text":"<pre><code>qm create 9000 --name deb12-docker-base --ostype l26 --memory 2048 --cores 2   --net0 virtio,bridge=vmbr0\nqm importdisk 9000 /var/lib/vz/template/iso/debian-12-genericcloud-amd64.qcow2 local-lvm\nqm set 9000 --scsihw virtio-scsi-pci --scsi0 local-lvm:vm-9000-disk-0\nqm set 9000 --ide2 local-lvm:cloudinit\nqm set 9000 --boot c --bootdisk scsi0\nqm set 9000 --vga std --serial0 socket --agent enabled=1\nqm resize 9000 scsi0 20G\nqm set 9000 --ciuser dockeruser --cipassword 'TempPassw0rd!' --ipconfig0 ip=dhcp\nqm cloudinit update 9000\n</code></pre>"},{"location":"portainer-demo/#section-2-guest-prepare-debian-inside-vm","title":"\ud83d\udd39 Section 2. Guest: Prepare Debian (inside VM)","text":""},{"location":"portainer-demo/#script-prep_guest_deb12sh","title":"Script: <code>prep_guest_deb12.sh</code>","text":"<pre><code>#!/usr/bin/env bash\n# Inside the Debian 12 VM: enable serial login + install QEMU Guest Agent and Docker\n\nset -euo pipefail\nexport DEBIAN_FRONTEND=noninteractive\n\n# Serial login\nsystemctl enable serial-getty@ttyS0.service\nsystemctl start  serial-getty@ttyS0.service\n\n# Guest agent\napt-get update\napt-get install -y qemu-guest-agent\nsystemctl start qemu-guest-agent || true\nsystemctl enable --now qemu-guest-agent.socket || true\n\n# Docker\napt-get install -y ca-certificates curl gnupg lsb-release\nmkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/debian/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \\\nhttps://download.docker.com/linux/debian $(lsb_release -cs) stable\" \\\n  &gt; /etc/apt/sources.list.d/docker.list\n\napt-get update\napt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\nsystemctl enable --now docker\nusermod -aG docker dockeruser\n</code></pre>"},{"location":"portainer-demo/#manual-equivalent_1","title":"Manual Equivalent","text":"<pre><code>sudo systemctl enable serial-getty@ttyS0.service\nsudo systemctl start serial-getty@ttyS0.service\n\nsudo apt-get update\nsudo apt-get install -y qemu-guest-agent\nsudo systemctl start qemu-guest-agent\nsudo systemctl enable --now qemu-guest-agent.socket\n\nsudo apt-get install -y ca-certificates curl gnupg lsb-release\nsudo mkdir -m 0755 -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/debian/gpg | \\\n  sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \\\nhttps://download.docker.com/linux/debian $(lsb_release -cs) stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list\nsudo apt-get update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\nsudo systemctl enable --now docker\nsudo usermod -aG docker dockeruser\n</code></pre>"},{"location":"portainer-demo/#section-3-host-clone-helper","title":"\ud83d\udd39 Section 3. Host: Clone Helper","text":""},{"location":"portainer-demo/#script-clone_from_templatesh","title":"Script: <code>clone_from_template.sh</code>","text":"<pre><code>#!/usr/bin/env bash\n# Clone from template 9000 and set per-VM creds\n\nset -euo pipefail\n\nTEMPLATE_VMID=9000\nNEWID=$1\nNEWNAME=$2\nPUBKEY=$3\nCIPASS=${4:-BetterPassw0rd!}\nNEWDISK=${5:-}\n\nqm clone $TEMPLATE_VMID $NEWID --name $NEWNAME --full\n\nif [[ -n \"$NEWDISK\" &amp;&amp; \"$NEWDISK\" != \"-\" ]]; then\n  qm resize $NEWID scsi0 $NEWDISK\nfi\n\nif [[ \"$CIPASS\" != \"-\" ]]; then\n  qm set $NEWID --ciuser dockeruser --cipassword \"$CIPASS\"\nelse\n  qm set $NEWID --ciuser dockeruser\nfi\n\nqm set $NEWID --sshkey \"$PUBKEY\"\nqm cloudinit update $NEWID\nqm start $NEWID\n</code></pre>"},{"location":"portainer-demo/#manual-equivalent_2","title":"Manual Equivalent","text":"<pre><code>qm clone 9000 101 --name docker01 --full\nqm resize 101 scsi0 40G              # optional\nqm set 101 --ciuser dockeruser --cipassword 'BetterPassw0rd!'\nqm set 101 --sshkey ~/.ssh/id_ed25519.pub\nqm cloudinit update 101\nqm start 101\n</code></pre>"},{"location":"portainer-demo/#post-clone-fs-growth-if-root-fs-didnt-expand","title":"Post-clone FS growth (if root FS didn\u2019t expand)","text":"<pre><code>sudo apt-get install -y cloud-guest-utils\nlsblk\nsudo growpart /dev/sda 1\nsudo resize2fs /dev/sda1   # ext4\n# OR sudo xfs_growfs /     # xfs\n</code></pre>"},{"location":"portainer-demo/#reset-cloud-init-if-you-want-to-reapply-settings","title":"Reset cloud-init (if you want to reapply settings)","text":"<pre><code>sudo cloud-init clean\nsudo rm -rf /var/lib/cloud\nsudo reboot\n</code></pre>"},{"location":"portainer-demo/#section-4-ssh-key-management","title":"\ud83d\udd39 Section 4. SSH Key Management","text":"<ul> <li>Per-clone: inject one or more public keys with:   <code>bash   qm set &lt;vmid&gt; --sshkey /root/combined_keys.pub   qm cloudinit update &lt;vmid&gt;</code></li> <li>File can contain multiple public keys (one per line).</li> </ul>"},{"location":"portainer-demo/#summary-workflow","title":"\u2705 Summary Workflow","text":"<ol> <li>Build base VM (<code>build_deb12_docker_base.sh</code> or manual).  </li> <li>Boot once, prep guest (<code>prep_guest_deb12.sh</code>).  </li> <li>Shut down \u2192 <code>qm template 9000</code>.  </li> <li>Clone (<code>clone_from_template.sh</code> or manual).  </li> <li>Optionally resize disk and grow FS.  </li> <li>Inject per-clone SSH keys.  </li> </ol>"}]}